class Solution {
private:
    void solve(vector<string> &board, int row, vector<vector<string>> &ans) {
        // base case
        // We reached the last row, so we have a solution so we add it to the solution vector
        if(row == size(board)) {
            ans.push_back(board);
            return;
        }

        // try placing a queen on each column for a given row.
        // explore next row by placing Q at each valid column for the current row
        for(int col=0; col<size(board); col++) {
            if(isSafe(board, row, col)) {
                // queeen place on a valid cell
                board[row][col] = 'Q';
                // exploring next row
                solve(board, row + 1, ans);
                // backtracking to get all possible solutions
                board[row][col] = '.';
            }
        }
    }

    bool isSafe(vector<string> &board, int row, int col) {
        int n = size(board);
        for(int i=0; i<n; i++) {
            // checking if there is a queen in the same column
            if(board[i][col] == 'Q') return false;
            // checking if there is a queen in the same diagonal ( left to right)
            if(row - i >= 0 && col - i >= 0 && board[row - i][col - i] == 'Q') return false;
            if(row - i >= 0 && col + i >= 0 && board[row - i][col + i] == 'Q') return false;
            // No need to traverse more since the lower rows below current row attribute will always be safe.
			/* if(row + i <  n && col - i >= 0 && board[row + i][col - i] == 'Q') return false;
			if(row + i <  n && col + i <  n && board[row + i][col + i] == 'Q') return false; */
        }
        return true;
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n, string(n, '.'));
        solve(board, 0, ans);
        return ans;
    }
};